# 9 "c/frontc/clexer.mll"
 
open Cparser
exception Eof
exception InternalError of string
let version = "Clexer V1.0f 10.8.99 Hugues CassÃ©"


(*
 * input handle
 *)
type handle = {
  h_interactive: bool;
  h_in_channel: in_channel;
  mutable h_line: string;
  mutable h_buffer: string;
  mutable h_pos: int;
  mutable h_lineno: int;
  h_out_channel: out_channel;
  mutable h_file_name: string;
  h_gcc: bool;
  h_linerec: bool;
}
let current_handle = ref {
    h_interactive = false;
    h_in_channel = stdin;
    h_line = "";
    h_buffer = "";
    h_pos = 0;
    h_lineno = 0;
    h_out_channel = stdout;
    h_file_name = "";
    h_gcc = true;
    h_linerec = false;
  }

let interactive (h : handle) = h.h_interactive
let in_channel (h : handle) = h.h_in_channel
let line (h : handle) = h.h_line
let buffer (h : handle) = h.h_buffer
let pos (h : handle) = h.h_pos
let real_pos (i : int) (h : handle) = i - h.h_pos
let lineno (h : handle) = h.h_lineno
let out_channel (h : handle) = h.h_out_channel
let file_name (h : handle) = h.h_file_name
let linerec (h: handle) = h.h_linerec
let curfile _ = (!current_handle).h_file_name
let curline _ = (!current_handle).h_lineno
let has_gcc _ = (!current_handle).h_gcc


(*
 * Error handling
 *)
let underline_error (buffer : string) (start : int) (stop : int) =
  let len = String.length buffer in
  let start' = max 0 start in
  let stop' = max 1 stop in
  (
    (if start' > 0 then (String.sub buffer 0 start') else "")
    ^ "\027[4m"
    ^ (if 0 <= start' && start' < stop' && stop <= len
       then (String.sub buffer start' (stop' - start' ) )
       else ""
      )
    ^ "\027[0m"
    ^ (if stop' < len then (String.sub buffer stop' (len - stop') ) else "")
  )

let display_error msg token_start token_end =
  output_string (out_channel !current_handle) (
    (if (interactive !current_handle)
     then ""
     else
       (file_name !current_handle) ^ "["
       ^ (string_of_int (lineno !current_handle)) ^ "] "
    )
    ^ msg ^ ": "
    ^ (underline_error
  (line !current_handle)
  (real_pos token_start !current_handle)
  (real_pos token_end !current_handle)
      )
  );
  flush (out_channel !current_handle)

let display_semantic_error msg =
  display_error msg (pos !current_handle) (pos !current_handle)


let error msg =
  display_error msg 0 0;
  assert false

let test_gcc _ = if not (!current_handle).h_gcc then  error "forbidden GCC syntax"


(*
** Keyword hashtable
*)
let id token _ = token

module HashString =
struct
  type t = string
  let equal (s1 : t) (s2 : t) = s1 = s2
  let hash (s : t) = Hashtbl.hash s
end
module StringHashtbl = Hashtbl.Make(HashString)
let lexicon = StringHashtbl.create 211

let builtin name = (name, id (BUILTIN_TYPE name))


let keywords =
  [
    ("auto", id AUTO);
    ("const", id CONST); ("__const", id CONST);
    ("static", id STATIC);
    ("extern", id EXTERN);
    ("long", id LONG);
    ("_Complex", id COMPLEX);
    builtin "__float128";
    builtin "__float80";
    builtin "__ibm128";
    builtin "_Float16";
    builtin "_Float32";
    builtin "_Float32x";
    builtin "_Float64";
    builtin "_Float64x";
    builtin "_Float80";
    builtin "_Float128";
    builtin "_Float128x";
    builtin "_Ibm128";
    ("short", id SHORT);
    ("register", id REGISTER);
    ("signed", id SIGNED);
    ("unsigned", id UNSIGNED);
    ("volatile", id VOLATILE);
    ("inline", id INLINE);
    ("__restrict", id RESTRICT);
    ("restrict", id RESTRICT);
    ("char", id CHAR);
    ("_Bool", id BOOL);
    ("int", id INT);
    ("float", id FLOAT);
    ("double", id DOUBLE);
    ("void", id VOID);
    ("enum", id ENUM);
    ("struct", id STRUCT);
    ("typedef", id TYPEDEF);
    ("union", id UNION);
    ("break", fun _ -> BREAK (curfile(), curline()));
    ("continue", fun _ -> CONTINUE (curfile(), curline()));
    ("goto", fun _ -> GOTO (curfile(), curline()));
    ("return", fun _ -> RETURN (curfile(), curline()));
    ("switch", fun _ -> SWITCH (curfile(), curline()));
    ("case", fun _ -> CASE (curfile(), curline()));
    ("default", fun _ -> DEFAULT (curfile(), curline()));
    ("while", fun _ -> WHILE (curfile(), curline()));
    ("do", fun _ -> DO (curfile(), curline()));
    ("for", fun _ -> FOR (curfile(), curline()));
    ("if", fun _ -> IF (curfile(), curline()));
    ("else", fun _ -> ELSE (curfile(), curline()));
    ("asm", id ASM); ("__asm__", id ASM);
  ]

(*** Specific GNU ***)
let gnu_keywords : (string * (unit -> Cparser.token)) list = [
  ("__attribute__", id ATTRIBUTE);
  ("__extension__", id EXTENSION);
  ("__inline", id INLINE)
]

let init_lexicon _ =
  let add (key, token) = StringHashtbl.add lexicon key token in
  StringHashtbl.clear lexicon;
  List.iter add keywords;
  if has_gcc ()  then List.iter add gnu_keywords

let typename name =
  match StringHashtbl.find_opt lexicon name with
  | None -> name
  | Some token -> match token () with
    | NAMED_TYPE name -> name
    | _ -> name

let add_type name =
  StringHashtbl.add lexicon name (id (NAMED_TYPE name))

let context : string list list ref = ref []

let push_context _ = context := []::!context

let pop_context _ =
  match !context with
    [] -> raise (InternalError "Empty context stack")
  | con::sub ->
    (context := sub;
     List.iter (fun name -> StringHashtbl.remove lexicon name) con)

let add_identifier name =
  match !context with
    [] -> raise (InternalError "Empty context stack")
  | con::sub ->
    (context := (name::con)::sub;
     StringHashtbl.add lexicon name (id (IDENT name)))


(*
** Useful primitives
*)
let rem_quotes str = String.sub str 1 ((String.length str) - 2)
let scan_ident id =
  try (StringHashtbl.find lexicon id) ()
  with Not_found -> IDENT id

(*
** Buffer processor
*)

let set_line num =
  (!current_handle).h_lineno <- num - 1

let set_name name =
  (!current_handle).h_file_name <- name


(*** escape character management ***)
let scan_escape str =
  match str with
    "n" -> "\n"
  | "r" -> "\r"
  | "t" -> "\t"
  | "b" -> "\b"
  | _ -> str
let get_value chr =
  match chr with
  '0'..'9' -> (Char.code chr) - (Char.code '0')
  | 'a'..'z' -> (Char.code chr) - (Char.code 'a') + 10
  | 'A'..'Z' -> (Char.code chr) - (Char.code 'A') + 10
  | _ -> 0
let scan_hex_escape str =
  String.make 1 (Char.chr (
      (get_value (String.get str 0)) * 16
      + (get_value (String.get str 1))
    ))
let scan_oct_escape str =
  String.make 1 (Char.chr (
      (get_value (String.get str 0)) * 64
      + (get_value (String.get str 1)) * 8
      + (get_value (String.get str 2))
    ))

# 256 "c/frontc/clexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\193\255\079\000\160\000\235\000\198\255\199\255\200\255\
    \201\255\202\255\203\255\204\255\205\255\206\255\207\255\208\255\
    \003\000\076\000\079\000\031\000\064\001\080\000\035\000\081\000\
    \157\000\160\000\109\000\057\001\078\001\116\001\249\255\250\255\
    \251\255\001\000\253\255\075\001\238\255\254\255\255\255\252\255\
    \189\001\157\001\222\001\073\001\074\001\253\001\075\001\134\001\
    \077\001\092\001\073\000\248\255\007\002\036\002\068\002\212\001\
    \247\255\078\002\107\002\139\002\097\000\090\000\246\255\125\000\
    \242\255\228\255\055\000\101\000\104\000\003\000\243\255\222\255\
    \241\255\220\255\221\255\240\255\239\255\237\255\212\255\236\255\
    \213\255\235\255\234\255\227\255\162\000\233\255\226\255\163\000\
    \232\255\229\255\209\002\028\003\103\003\178\003\253\003\072\004\
    \147\004\252\000\254\255\204\000\255\255\027\001\253\255\002\000\
    \255\255\254\255\005\005\251\255\246\004\253\255\004\000\255\255\
    \254\255\219\000\212\000\252\255\216\001\251\255\218\000\253\255\
    \005\000\255\255\254\255\252\255\220\000\140\001\253\255\006\000\
    \255\255\254\255\106\001\250\255\231\004\255\255\251\255\177\002\
    \200\002\034\005\060\005\254\255\019\005\253\255\065\001\250\255\
    \089\005\255\255\251\255\097\005\115\005\135\005\173\005\254\255\
    \162\005\253\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\061\000\061\000\061\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \030\000\032\000\031\000\046\000\044\000\045\000\040\000\038\000\
    \037\000\036\000\041\000\058\000\011\000\011\000\255\255\255\255\
    \255\255\255\255\255\255\039\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\007\000\011\000\011\000\010\000\010\000\010\000\
    \010\000\011\000\255\255\255\255\007\000\255\255\007\000\255\255\
    \255\255\007\000\255\255\009\000\009\000\009\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\024\000\255\255\255\255\025\000\
    \255\255\255\255\061\000\061\000\061\000\061\000\059\000\061\000\
    \060\000\255\255\255\255\001\000\255\255\255\255\255\255\002\000\
    \255\255\255\255\255\255\255\255\003\000\255\255\004\000\255\255\
    \255\255\003\000\003\000\255\255\255\255\255\255\004\000\255\255\
    \004\000\255\255\255\255\255\255\255\255\255\255\255\255\002\000\
    \255\255\255\255\255\255\255\255\005\000\255\255\255\255\004\000\
    \003\000\004\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \005\000\255\255\255\255\004\000\003\000\004\000\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_default =
   "\255\255\000\000\255\255\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \000\000\255\255\000\000\255\255\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \000\000\000\000\255\255\255\255\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\255\255\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\098\000\000\000\255\255\000\000\102\000\000\000\255\255\
    \000\000\000\000\107\000\000\000\255\255\000\000\255\255\000\000\
    \000\000\255\255\255\255\000\000\117\000\000\000\124\000\000\000\
    \255\255\000\000\000\000\000\000\124\000\126\000\000\000\255\255\
    \000\000\000\000\131\000\000\000\134\000\000\000\000\000\255\255\
    \255\255\255\255\255\255\000\000\255\255\000\000\143\000\000\000\
    \146\000\000\000\000\000\255\255\255\255\255\255\255\255\000\000\
    \255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\034\000\034\000\039\000\105\000\033\000\112\000\122\000\
    \129\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \034\000\026\000\030\000\032\000\070\000\022\000\020\000\031\000\
    \008\000\007\000\023\000\025\000\005\000\024\000\027\000\035\000\
    \029\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\014\000\006\000\018\000\016\000\017\000\015\000\
    \089\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\010\000\082\000\009\000\019\000\002\000\
    \077\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\003\000\002\000\
    \002\000\002\000\002\000\004\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\012\000\021\000\011\000\013\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\086\000\087\000\084\000\083\000\079\000\076\000\056\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\065\000\064\000\067\000\062\000\002\000\062\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\074\000\071\000\078\000\062\000\068\000\062\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\075\000\073\000\069\000\072\000\066\000\085\000\
    \088\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\100\000\123\000\000\000\123\000\002\000\
    \001\000\002\000\002\000\002\000\002\000\095\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\104\000\099\000\115\000\
    \103\000\115\000\000\000\000\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\000\000\115\000\
    \000\000\115\000\002\000\000\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\090\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\080\000\063\000\
    \145\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\000\000\000\000\038\000\000\000\042\000\
    \042\000\042\000\037\000\042\000\042\000\081\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \036\000\000\000\042\000\000\000\133\000\000\000\041\000\041\000\
    \041\000\000\000\041\000\041\000\000\000\049\000\128\000\048\000\
    \000\000\127\000\044\000\000\000\000\000\144\000\000\000\049\000\
    \000\000\041\000\042\000\043\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\028\000\028\000\041\000\041\000\
    \041\000\000\000\041\000\041\000\042\000\049\000\000\000\048\000\
    \000\000\041\000\044\000\000\000\000\000\000\000\000\000\049\000\
    \044\000\041\000\000\000\043\000\000\000\000\000\132\000\000\000\
    \058\000\043\000\058\000\041\000\040\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\000\000\
    \000\000\041\000\255\255\048\000\255\255\000\000\000\000\000\000\
    \044\000\119\000\121\000\000\000\000\000\120\000\000\000\000\000\
    \000\000\043\000\000\000\041\000\040\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\000\000\
    \119\000\000\000\118\000\048\000\255\255\000\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\051\000\000\000\000\000\000\000\
    \000\000\000\000\051\000\042\000\000\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\028\000\028\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\255\255\041\000\000\000\051\000\000\000\000\000\050\000\
    \000\000\047\000\051\000\000\000\053\000\051\000\000\000\055\000\
    \000\000\055\000\046\000\051\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\000\000\000\000\
    \000\000\000\000\041\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\047\000\255\255\000\000\053\000\051\000\000\000\000\000\
    \050\000\000\000\046\000\051\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \000\000\000\000\051\000\000\000\255\255\000\000\000\000\000\000\
    \051\000\000\000\000\000\000\000\051\000\000\000\000\000\000\000\
    \000\000\000\000\051\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\000\000\000\000\000\000\
    \000\000\000\000\051\000\000\000\000\000\050\000\000\000\000\000\
    \051\000\000\000\000\000\000\000\051\000\000\000\000\000\050\000\
    \000\000\000\000\051\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\000\000\000\000\000\000\000\000\000\000\061\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \060\000\140\000\140\000\140\000\140\000\140\000\140\000\140\000\
    \140\000\000\000\000\000\000\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\000\000\000\000\000\000\000\000\000\000\061\000\
    \140\000\140\000\140\000\140\000\140\000\140\000\140\000\140\000\
    \060\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\091\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\000\000\
    \000\000\000\000\000\000\002\000\000\000\002\000\002\000\002\000\
    \002\000\092\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\000\000\000\000\000\000\000\000\002\000\000\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\093\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\000\000\000\000\000\000\
    \000\000\002\000\000\000\002\000\002\000\002\000\002\000\002\000\
    \094\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \000\000\000\000\000\000\000\000\002\000\000\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\000\000\000\000\000\000\000\000\002\000\
    \000\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\096\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\000\000\000\000\
    \000\000\000\000\002\000\000\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\109\000\111\000\
    \000\000\000\000\110\000\000\000\000\000\000\000\000\000\136\000\
    \135\000\135\000\135\000\135\000\135\000\135\000\135\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\109\000\108\000\108\000\
    \108\000\108\000\108\000\108\000\108\000\108\000\108\000\108\000\
    \000\000\000\000\000\000\000\000\000\000\108\000\108\000\108\000\
    \108\000\108\000\108\000\108\000\108\000\108\000\108\000\137\000\
    \000\000\000\000\114\000\141\000\141\000\141\000\141\000\141\000\
    \141\000\141\000\141\000\113\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\138\000\138\000\138\000\138\000\138\000\138\000\
    \138\000\138\000\138\000\138\000\000\000\000\000\000\000\137\000\
    \000\000\000\000\114\000\138\000\138\000\138\000\138\000\138\000\
    \138\000\000\000\000\000\113\000\139\000\139\000\139\000\139\000\
    \139\000\139\000\139\000\139\000\139\000\139\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\139\000\139\000\139\000\
    \139\000\139\000\139\000\138\000\138\000\138\000\138\000\138\000\
    \138\000\148\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\152\000\152\000\152\000\152\000\152\000\152\000\152\000\
    \152\000\000\000\000\000\000\000\000\000\139\000\139\000\139\000\
    \139\000\139\000\139\000\152\000\152\000\152\000\152\000\152\000\
    \152\000\152\000\152\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\149\000\000\000\000\000\000\000\000\000\000\000\150\000\
    \150\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
    \150\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \150\000\150\000\150\000\150\000\150\000\150\000\000\000\000\000\
    \000\000\149\000\153\000\153\000\153\000\153\000\153\000\153\000\
    \153\000\153\000\000\000\000\000\000\000\151\000\151\000\151\000\
    \151\000\151\000\151\000\151\000\151\000\151\000\151\000\255\255\
    \150\000\150\000\150\000\150\000\150\000\150\000\151\000\151\000\
    \151\000\151\000\151\000\151\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\151\000\151\000\
    \151\000\151\000\151\000\151\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\033\000\103\000\000\000\110\000\120\000\
    \127\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\069\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\019\000\000\000\000\000\000\000\
    \022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\017\000\017\000\018\000\018\000\021\000\023\000\050\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\026\000\063\000\066\000\060\000\002\000\061\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\024\000\025\000\021\000\060\000\067\000\061\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\024\000\024\000\068\000\025\000\026\000\084\000\
    \087\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\099\000\118\000\255\255\124\000\003\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\101\000\097\000\113\000\
    \101\000\114\000\255\255\255\255\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\255\255\113\000\
    \255\255\114\000\004\000\255\255\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\020\000\027\000\
    \142\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\255\255\255\255\035\000\255\255\043\000\
    \044\000\046\000\035\000\048\000\028\000\020\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \035\000\255\255\049\000\255\255\130\000\255\255\043\000\044\000\
    \046\000\255\255\048\000\028\000\255\255\043\000\125\000\046\000\
    \255\255\125\000\028\000\255\255\255\255\142\000\255\255\044\000\
    \255\255\049\000\029\000\028\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\043\000\044\000\
    \046\000\255\255\048\000\028\000\047\000\043\000\255\255\046\000\
    \255\255\029\000\028\000\255\255\255\255\255\255\255\255\044\000\
    \029\000\049\000\255\255\028\000\255\255\255\255\130\000\255\255\
    \041\000\029\000\041\000\047\000\029\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\255\255\
    \255\255\029\000\118\000\047\000\124\000\255\255\255\255\255\255\
    \029\000\116\000\116\000\255\255\255\255\116\000\255\255\255\255\
    \255\255\029\000\255\255\047\000\029\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\255\255\
    \116\000\255\255\116\000\047\000\097\000\255\255\040\000\040\000\
    \040\000\040\000\040\000\040\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \255\255\255\255\255\255\101\000\255\255\255\255\040\000\040\000\
    \040\000\040\000\040\000\040\000\042\000\255\255\255\255\255\255\
    \255\255\255\255\042\000\045\000\255\255\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\142\000\045\000\255\255\042\000\255\255\255\255\042\000\
    \255\255\045\000\042\000\255\255\052\000\052\000\255\255\053\000\
    \255\255\053\000\045\000\052\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\255\255\255\255\
    \255\255\255\255\045\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\045\000\130\000\255\255\052\000\052\000\255\255\255\255\
    \052\000\255\255\045\000\052\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \255\255\255\255\054\000\255\255\125\000\255\255\255\255\255\255\
    \054\000\255\255\255\255\255\255\057\000\255\255\255\255\255\255\
    \255\255\255\255\057\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\255\255\255\255\255\255\
    \255\255\255\255\054\000\255\255\255\255\054\000\255\255\255\255\
    \054\000\255\255\255\255\255\255\057\000\255\255\255\255\057\000\
    \255\255\255\255\057\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\059\000\059\000\059\000\059\000\
    \059\000\059\000\255\255\255\255\255\255\255\255\255\255\059\000\
    \116\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \059\000\135\000\135\000\135\000\135\000\135\000\135\000\135\000\
    \135\000\255\255\255\255\255\255\059\000\059\000\059\000\059\000\
    \059\000\059\000\255\255\255\255\255\255\255\255\255\255\059\000\
    \136\000\136\000\136\000\136\000\136\000\136\000\136\000\136\000\
    \059\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\255\255\255\255\255\255\255\255\
    \090\000\255\255\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\091\000\091\000\091\000\091\000\
    \091\000\091\000\091\000\091\000\091\000\091\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\091\000\091\000\091\000\
    \091\000\091\000\091\000\091\000\091\000\091\000\091\000\091\000\
    \091\000\091\000\091\000\091\000\091\000\091\000\091\000\091\000\
    \091\000\091\000\091\000\091\000\091\000\091\000\091\000\255\255\
    \255\255\255\255\255\255\091\000\255\255\091\000\091\000\091\000\
    \091\000\091\000\091\000\091\000\091\000\091\000\091\000\091\000\
    \091\000\091\000\091\000\091\000\091\000\091\000\091\000\091\000\
    \091\000\091\000\091\000\091\000\091\000\091\000\091\000\092\000\
    \092\000\092\000\092\000\092\000\092\000\092\000\092\000\092\000\
    \092\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \092\000\092\000\092\000\092\000\092\000\092\000\092\000\092\000\
    \092\000\092\000\092\000\092\000\092\000\092\000\092\000\092\000\
    \092\000\092\000\092\000\092\000\092\000\092\000\092\000\092\000\
    \092\000\092\000\255\255\255\255\255\255\255\255\092\000\255\255\
    \092\000\092\000\092\000\092\000\092\000\092\000\092\000\092\000\
    \092\000\092\000\092\000\092\000\092\000\092\000\092\000\092\000\
    \092\000\092\000\092\000\092\000\092\000\092\000\092\000\092\000\
    \092\000\092\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\255\255\255\255\255\255\
    \255\255\093\000\255\255\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\094\000\094\000\094\000\
    \094\000\094\000\094\000\094\000\094\000\094\000\094\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\094\000\094\000\
    \094\000\094\000\094\000\094\000\094\000\094\000\094\000\094\000\
    \094\000\094\000\094\000\094\000\094\000\094\000\094\000\094\000\
    \094\000\094\000\094\000\094\000\094\000\094\000\094\000\094\000\
    \255\255\255\255\255\255\255\255\094\000\255\255\094\000\094\000\
    \094\000\094\000\094\000\094\000\094\000\094\000\094\000\094\000\
    \094\000\094\000\094\000\094\000\094\000\094\000\094\000\094\000\
    \094\000\094\000\094\000\094\000\094\000\094\000\094\000\094\000\
    \095\000\095\000\095\000\095\000\095\000\095\000\095\000\095\000\
    \095\000\095\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\095\000\095\000\095\000\095\000\095\000\095\000\095\000\
    \095\000\095\000\095\000\095\000\095\000\095\000\095\000\095\000\
    \095\000\095\000\095\000\095\000\095\000\095\000\095\000\095\000\
    \095\000\095\000\095\000\255\255\255\255\255\255\255\255\095\000\
    \255\255\095\000\095\000\095\000\095\000\095\000\095\000\095\000\
    \095\000\095\000\095\000\095\000\095\000\095\000\095\000\095\000\
    \095\000\095\000\095\000\095\000\095\000\095\000\095\000\095\000\
    \095\000\095\000\095\000\096\000\096\000\096\000\096\000\096\000\
    \096\000\096\000\096\000\096\000\096\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\096\000\096\000\096\000\096\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\255\255\255\255\
    \255\255\255\255\096\000\255\255\096\000\096\000\096\000\096\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\106\000\106\000\
    \255\255\255\255\106\000\255\255\255\255\255\255\255\255\132\000\
    \132\000\132\000\132\000\132\000\132\000\132\000\132\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\106\000\108\000\108\000\
    \108\000\108\000\108\000\108\000\108\000\108\000\108\000\108\000\
    \255\255\255\255\255\255\255\255\255\255\106\000\106\000\106\000\
    \106\000\106\000\106\000\106\000\106\000\106\000\106\000\132\000\
    \255\255\255\255\108\000\140\000\140\000\140\000\140\000\140\000\
    \140\000\140\000\140\000\108\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\137\000\137\000\137\000\137\000\137\000\137\000\
    \137\000\137\000\137\000\137\000\255\255\255\255\255\255\132\000\
    \255\255\255\255\108\000\137\000\137\000\137\000\137\000\137\000\
    \137\000\255\255\255\255\108\000\138\000\138\000\138\000\138\000\
    \138\000\138\000\138\000\138\000\138\000\138\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\138\000\138\000\138\000\
    \138\000\138\000\138\000\137\000\137\000\137\000\137\000\137\000\
    \137\000\144\000\144\000\144\000\144\000\144\000\144\000\144\000\
    \144\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\255\255\255\255\255\255\255\255\138\000\138\000\138\000\
    \138\000\138\000\138\000\148\000\148\000\148\000\148\000\148\000\
    \148\000\148\000\148\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\144\000\255\255\255\255\255\255\255\255\255\255\149\000\
    \149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\
    \149\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \149\000\149\000\149\000\149\000\149\000\149\000\255\255\255\255\
    \255\255\144\000\152\000\152\000\152\000\152\000\152\000\152\000\
    \152\000\152\000\255\255\255\255\255\255\150\000\150\000\150\000\
    \150\000\150\000\150\000\150\000\150\000\150\000\150\000\132\000\
    \149\000\149\000\149\000\149\000\149\000\149\000\150\000\150\000\
    \150\000\150\000\150\000\150\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\106\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\150\000\150\000\
    \150\000\150\000\150\000\150\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\144\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec initial lexbuf =
   __ocaml_lex_initial_rec lexbuf 0
and __ocaml_lex_initial_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 293 "c/frontc/clexer.mll"
                (let _ = comment lexbuf in initial lexbuf)
# 772 "c/frontc/clexer.ml"

  | 1 ->
# 294 "c/frontc/clexer.mll"
                 (test_gcc (); let _ = line_comment lexbuf in initial lexbuf )
# 777 "c/frontc/clexer.ml"

  | 2 ->
# 295 "c/frontc/clexer.mll"
                  (initial lexbuf)
# 782 "c/frontc/clexer.ml"

  | 3 ->
# 296 "c/frontc/clexer.mll"
                   (initial lexbuf)
# 787 "c/frontc/clexer.ml"

  | 4 ->
# 297 "c/frontc/clexer.mll"
                 (line lexbuf)
# 792 "c/frontc/clexer.ml"

  | 5 ->
# 299 "c/frontc/clexer.mll"
                 (CST_CHAR (chr lexbuf))
# 797 "c/frontc/clexer.ml"

  | 6 ->
# 300 "c/frontc/clexer.mll"
                 (CST_STRING (str lexbuf))
# 802 "c/frontc/clexer.ml"

  | 7 ->
# 301 "c/frontc/clexer.mll"
                    (CST_FLOAT (Lexing.lexeme lexbuf))
# 807 "c/frontc/clexer.ml"

  | 8 ->
# 302 "c/frontc/clexer.mll"
                    (CST_FLOAT (Lexing.lexeme lexbuf))
# 812 "c/frontc/clexer.ml"

  | 9 ->
# 303 "c/frontc/clexer.mll"
                   (CST_INT (Lexing.lexeme lexbuf))
# 817 "c/frontc/clexer.ml"

  | 10 ->
# 304 "c/frontc/clexer.mll"
                   (CST_INT (Lexing.lexeme lexbuf))
# 822 "c/frontc/clexer.ml"

  | 11 ->
# 305 "c/frontc/clexer.mll"
                   (CST_INT (Lexing.lexeme lexbuf))
# 827 "c/frontc/clexer.ml"

  | 12 ->
# 307 "c/frontc/clexer.mll"
                    (EOF)
# 832 "c/frontc/clexer.ml"

  | 13 ->
# 308 "c/frontc/clexer.mll"
                  (ELLIPSIS(curfile(), curline()))
# 837 "c/frontc/clexer.ml"

  | 14 ->
# 309 "c/frontc/clexer.mll"
                 (PLUS_EQ(curfile(), curline()))
# 842 "c/frontc/clexer.ml"

  | 15 ->
# 310 "c/frontc/clexer.mll"
                 (MINUS_EQ(curfile(), curline()))
# 847 "c/frontc/clexer.ml"

  | 16 ->
# 311 "c/frontc/clexer.mll"
                 (STAR_EQ(curfile(), curline()))
# 852 "c/frontc/clexer.ml"

  | 17 ->
# 312 "c/frontc/clexer.mll"
                 (SLASH_EQ(curfile(), curline()))
# 857 "c/frontc/clexer.ml"

  | 18 ->
# 313 "c/frontc/clexer.mll"
                 (PERCENT_EQ(curfile(), curline()))
# 862 "c/frontc/clexer.ml"

  | 19 ->
# 314 "c/frontc/clexer.mll"
                 (PIPE_EQ(curfile(), curline()))
# 867 "c/frontc/clexer.ml"

  | 20 ->
# 315 "c/frontc/clexer.mll"
                 (AND_EQ(curfile(), curline()))
# 872 "c/frontc/clexer.ml"

  | 21 ->
# 316 "c/frontc/clexer.mll"
                 (CIRC_EQ(curfile(), curline()))
# 877 "c/frontc/clexer.ml"

  | 22 ->
# 317 "c/frontc/clexer.mll"
                  (INF_INF_EQ(curfile(), curline()))
# 882 "c/frontc/clexer.ml"

  | 23 ->
# 318 "c/frontc/clexer.mll"
                  (SUP_SUP_EQ(curfile(), curline()))
# 887 "c/frontc/clexer.ml"

  | 24 ->
# 319 "c/frontc/clexer.mll"
                 (INF_INF)
# 892 "c/frontc/clexer.ml"

  | 25 ->
# 320 "c/frontc/clexer.mll"
                 (SUP_SUP)
# 897 "c/frontc/clexer.ml"

  | 26 ->
# 321 "c/frontc/clexer.mll"
                 (EQ_EQ)
# 902 "c/frontc/clexer.ml"

  | 27 ->
# 322 "c/frontc/clexer.mll"
                 (EXCLAM_EQ)
# 907 "c/frontc/clexer.ml"

  | 28 ->
# 323 "c/frontc/clexer.mll"
                 (INF_EQ)
# 912 "c/frontc/clexer.ml"

  | 29 ->
# 324 "c/frontc/clexer.mll"
                 (SUP_EQ)
# 917 "c/frontc/clexer.ml"

  | 30 ->
# 325 "c/frontc/clexer.mll"
                 (EQ(curfile(), curline()))
# 922 "c/frontc/clexer.ml"

  | 31 ->
# 326 "c/frontc/clexer.mll"
                 (INF)
# 927 "c/frontc/clexer.ml"

  | 32 ->
# 327 "c/frontc/clexer.mll"
                 (SUP)
# 932 "c/frontc/clexer.ml"

  | 33 ->
# 328 "c/frontc/clexer.mll"
                 (PLUS_PLUS)
# 937 "c/frontc/clexer.ml"

  | 34 ->
# 329 "c/frontc/clexer.mll"
                 (MINUS_MINUS)
# 942 "c/frontc/clexer.ml"

  | 35 ->
# 330 "c/frontc/clexer.mll"
                 (ARROW)
# 947 "c/frontc/clexer.ml"

  | 36 ->
# 331 "c/frontc/clexer.mll"
                 (PLUS)
# 952 "c/frontc/clexer.ml"

  | 37 ->
# 332 "c/frontc/clexer.mll"
                 (MINUS)
# 957 "c/frontc/clexer.ml"

  | 38 ->
# 333 "c/frontc/clexer.mll"
                 (STAR)
# 962 "c/frontc/clexer.ml"

  | 39 ->
# 334 "c/frontc/clexer.mll"
                 (SLASH)
# 967 "c/frontc/clexer.ml"

  | 40 ->
# 335 "c/frontc/clexer.mll"
                 (PERCENT)
# 972 "c/frontc/clexer.ml"

  | 41 ->
# 336 "c/frontc/clexer.mll"
                 (EXCLAM)
# 977 "c/frontc/clexer.ml"

  | 42 ->
# 337 "c/frontc/clexer.mll"
                 (AND_AND)
# 982 "c/frontc/clexer.ml"

  | 43 ->
# 338 "c/frontc/clexer.mll"
                 (PIPE_PIPE)
# 987 "c/frontc/clexer.ml"

  | 44 ->
# 339 "c/frontc/clexer.mll"
                 (AND)
# 992 "c/frontc/clexer.ml"

  | 45 ->
# 340 "c/frontc/clexer.mll"
                 (PIPE)
# 997 "c/frontc/clexer.ml"

  | 46 ->
# 341 "c/frontc/clexer.mll"
                 (CIRC)
# 1002 "c/frontc/clexer.ml"

  | 47 ->
# 342 "c/frontc/clexer.mll"
                 (QUEST(curfile(), curline()))
# 1007 "c/frontc/clexer.ml"

  | 48 ->
# 343 "c/frontc/clexer.mll"
                 (COLON(curfile(), curline()))
# 1012 "c/frontc/clexer.ml"

  | 49 ->
# 344 "c/frontc/clexer.mll"
                 (TILDE)
# 1017 "c/frontc/clexer.ml"

  | 50 ->
# 346 "c/frontc/clexer.mll"
                 (LBRACE(curfile(), curline()))
# 1022 "c/frontc/clexer.ml"

  | 51 ->
# 347 "c/frontc/clexer.mll"
                 (RBRACE(curfile(), curline()))
# 1027 "c/frontc/clexer.ml"

  | 52 ->
# 348 "c/frontc/clexer.mll"
                 (LBRACKET(curfile(), curline()))
# 1032 "c/frontc/clexer.ml"

  | 53 ->
# 349 "c/frontc/clexer.mll"
                 (RBRACKET(curfile(), curline()))
# 1037 "c/frontc/clexer.ml"

  | 54 ->
# 350 "c/frontc/clexer.mll"
                 (LPAREN(curfile(), curline()))
# 1042 "c/frontc/clexer.ml"

  | 55 ->
# 351 "c/frontc/clexer.mll"
                 (RPAREN(curfile(), curline()))
# 1047 "c/frontc/clexer.ml"

  | 56 ->
# 352 "c/frontc/clexer.mll"
                 (SEMICOLON(curfile(), curline()))
# 1052 "c/frontc/clexer.ml"

  | 57 ->
# 353 "c/frontc/clexer.mll"
                 (COMMA(curfile(), curline()))
# 1057 "c/frontc/clexer.ml"

  | 58 ->
# 354 "c/frontc/clexer.mll"
                 (DOT)
# 1062 "c/frontc/clexer.ml"

  | 59 ->
# 355 "c/frontc/clexer.mll"
                    (SIZEOF)
# 1067 "c/frontc/clexer.ml"

  | 60 ->
# 356 "c/frontc/clexer.mll"
                 (NEW)
# 1072 "c/frontc/clexer.ml"

  | 61 ->
# 357 "c/frontc/clexer.mll"
                  (scan_ident (Lexing.lexeme lexbuf))
# 1077 "c/frontc/clexer.ml"

  | 62 ->
# 359 "c/frontc/clexer.mll"
                 (EOF)
# 1082 "c/frontc/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_initial_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 97
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 361 "c/frontc/clexer.mll"
                (())
# 1094 "c/frontc/clexer.ml"

  | 1 ->
# 362 "c/frontc/clexer.mll"
                 (comment lexbuf)
# 1099 "c/frontc/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and line_comment lexbuf =
   __ocaml_lex_line_comment_rec lexbuf 101
and __ocaml_lex_line_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 365 "c/frontc/clexer.mll"
                (())
# 1111 "c/frontc/clexer.ml"

  | 1 ->
# 366 "c/frontc/clexer.mll"
                  (())
# 1116 "c/frontc/clexer.ml"

  | 2 ->
# 367 "c/frontc/clexer.mll"
                 (line_comment lexbuf)
# 1121 "c/frontc/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_line_comment_rec lexbuf __ocaml_lex_state

and line lexbuf =
   __ocaml_lex_line_rec lexbuf 106
and __ocaml_lex_line_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 371 "c/frontc/clexer.mll"
               (initial lexbuf)
# 1133 "c/frontc/clexer.ml"

  | 1 ->
# 372 "c/frontc/clexer.mll"
                 (initial lexbuf)
# 1138 "c/frontc/clexer.ml"

  | 2 ->
# 373 "c/frontc/clexer.mll"
                 (line lexbuf)
# 1143 "c/frontc/clexer.ml"

  | 3 ->
# 374 "c/frontc/clexer.mll"
                  (set_line (int_of_string (Lexing.lexeme lexbuf));
     file lexbuf)
# 1149 "c/frontc/clexer.ml"

  | 4 ->
# 376 "c/frontc/clexer.mll"
              (endline lexbuf)
# 1154 "c/frontc/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_line_rec lexbuf __ocaml_lex_state

and file lexbuf =
   __ocaml_lex_file_rec lexbuf 116
and __ocaml_lex_file_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 378 "c/frontc/clexer.mll"
                (initial lexbuf)
# 1166 "c/frontc/clexer.ml"

  | 1 ->
# 379 "c/frontc/clexer.mll"
                  (initial lexbuf)
# 1171 "c/frontc/clexer.ml"

  | 2 ->
# 380 "c/frontc/clexer.mll"
                 (file lexbuf)
# 1176 "c/frontc/clexer.ml"

  | 3 ->
# 381 "c/frontc/clexer.mll"
                          (set_name (rem_quotes (Lexing.lexeme lexbuf));
      endline lexbuf)
# 1182 "c/frontc/clexer.ml"

  | 4 ->
# 383 "c/frontc/clexer.mll"
              (endline lexbuf)
# 1187 "c/frontc/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_file_rec lexbuf __ocaml_lex_state

and endline lexbuf =
   __ocaml_lex_endline_rec lexbuf 125
and __ocaml_lex_endline_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 385 "c/frontc/clexer.mll"
                 (initial lexbuf)
# 1199 "c/frontc/clexer.ml"

  | 1 ->
# 386 "c/frontc/clexer.mll"
                   (initial lexbuf)
# 1204 "c/frontc/clexer.ml"

  | 2 ->
# 387 "c/frontc/clexer.mll"
              (endline lexbuf)
# 1209 "c/frontc/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_endline_rec lexbuf __ocaml_lex_state

and str lexbuf =
   __ocaml_lex_str_rec lexbuf 130
and __ocaml_lex_str_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 390 "c/frontc/clexer.mll"
               ("")
# 1221 "c/frontc/clexer.ml"

  | 1 ->
# 391 "c/frontc/clexer.mll"
                     (let cur = scan_hex_escape (String.sub
         (Lexing.lexeme lexbuf) 2 2) in cur ^ (str lexbuf))
# 1227 "c/frontc/clexer.ml"

  | 2 ->
# 393 "c/frontc/clexer.mll"
                     (let cur = scan_oct_escape (String.sub
         (Lexing.lexeme lexbuf) 1 3) in cur ^ (str lexbuf))
# 1233 "c/frontc/clexer.ml"

  | 3 ->
# 395 "c/frontc/clexer.mll"
                 ((String.make 1 (Char.chr 0)) ^ (str lexbuf))
# 1238 "c/frontc/clexer.ml"

  | 4 ->
# 396 "c/frontc/clexer.mll"
                  (let cur = scan_escape (String.sub
         (Lexing.lexeme lexbuf) 1 1) in cur ^ (str lexbuf))
# 1244 "c/frontc/clexer.ml"

  | 5 ->
# 398 "c/frontc/clexer.mll"
              (let cur = Lexing.lexeme lexbuf in cur ^  (str lexbuf))
# 1249 "c/frontc/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_str_rec lexbuf __ocaml_lex_state

and chr lexbuf =
   __ocaml_lex_chr_rec lexbuf 142
and __ocaml_lex_chr_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 401 "c/frontc/clexer.mll"
               ("")
# 1261 "c/frontc/clexer.ml"

  | 1 ->
# 402 "c/frontc/clexer.mll"
                     (let cur = scan_hex_escape (String.sub
         (Lexing.lexeme lexbuf) 2 2) in cur ^ (chr lexbuf))
# 1267 "c/frontc/clexer.ml"

  | 2 ->
# 404 "c/frontc/clexer.mll"
                     (let cur = scan_oct_escape (String.sub
         (Lexing.lexeme lexbuf) 1 3) in cur ^ (chr lexbuf))
# 1273 "c/frontc/clexer.ml"

  | 3 ->
# 406 "c/frontc/clexer.mll"
                 ((String.make 1 (Char.chr 0)) ^ (chr lexbuf))
# 1278 "c/frontc/clexer.ml"

  | 4 ->
# 407 "c/frontc/clexer.mll"
                  (let cur = scan_escape (String.sub
         (Lexing.lexeme lexbuf) 1 1) in cur ^ (chr lexbuf))
# 1284 "c/frontc/clexer.ml"

  | 5 ->
# 409 "c/frontc/clexer.mll"
              (let cur = Lexing.lexeme lexbuf in cur ^ (chr lexbuf))
# 1289 "c/frontc/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_chr_rec lexbuf __ocaml_lex_state

;;

# 411 "c/frontc/clexer.mll"
           

            (*** get_buffer ***)
            let get_buffer (hr : handle ref) dst (len : int) : int =
              (*let (inter, chan, line, buffer, pos, lineno, out, name) = !hr in*)
              let h = !hr in
              try
                let (bufferp, linep, posp, linenop) =
           if h.h_buffer <> ""
           then (h.h_buffer, h.h_line , h.h_pos, h.h_lineno)
           else
             let buffer = (input_line h.h_in_channel) ^ "\n" in
             (
               buffer,
               (if h.h_interactive then h.h_line ^ buffer else buffer),
               (if h.h_interactive then h.h_pos else h.h_pos + (String.length h.h_line)),
               h.h_lineno + 1
             ) in
                (*let _ = print_endline ("-->" ^ linep) in*)
                let bufl = String.length bufferp in
                let lenp = min len bufl in
                let buffers = if bufl = lenp
           then ""
           else String.sub bufferp lenp (bufl - lenp) in
                begin
           String.blit bufferp 0 dst 0 lenp;
           h.h_line <- linep;
           h.h_buffer <- buffers;
           h.h_pos <- posp;
           h.h_lineno <- linenop;
           lenp
                end
              with End_of_file -> 0


(* init: handle -> ()
 ** Initialize lexer.
*)
let init hdl =
  init_lexicon ();
  current_handle := hdl

# 1339 "c/frontc/clexer.ml"
